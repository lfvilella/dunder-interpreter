//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.8
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:\Users\User\Documents\GitHub\della-compiler\src\app\tinyc\frontend\tinyc.g4 by ANTLR 4.8

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.8")]
[System.CLSCompliant(false)]
public partial class tinycParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, STRING=15, INT=16, WS=17;
	public const int
		RULE_program = 0, RULE_statement = 1, RULE_paren_expr = 2, RULE_expr = 3, 
		RULE_test = 4, RULE_sum_ = 5, RULE_term = 6, RULE_id_ = 7, RULE_integer = 8;
	public static readonly string[] ruleNames = {
		"program", "statement", "paren_expr", "expr", "test", "sum_", "term", 
		"id_", "integer"
	};

	private static readonly string[] _LiteralNames = {
		null, "'if'", "'else'", "'while'", "'do'", "';'", "'{'", "'}'", "'printf'", 
		"'('", "')'", "'='", "'<'", "'+'", "'-'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, "STRING", "INT", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "tinyc.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static tinycParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public tinycParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public tinycParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ProgramContext : ParserRuleContext {
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 19;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 18; statement();
				}
				}
				State = 21;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__8) | (1L << STRING) | (1L << INT))) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		public Paren_exprContext paren_expr() {
			return GetRuleContext<Paren_exprContext>(0);
		}
		public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterStatement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitStatement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 2, RULE_statement);
		int _la;
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 23; Match(T__0);
				State = 24; paren_expr();
				State = 25; statement();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 27; Match(T__0);
				State = 28; paren_expr();
				State = 29; statement();
				State = 30; Match(T__1);
				State = 31; statement();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 33; Match(T__2);
				State = 34; paren_expr();
				State = 35; statement();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 37; Match(T__3);
				State = 38; statement();
				State = 39; Match(T__2);
				State = 40; paren_expr();
				State = 41; Match(T__4);
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 43; Match(T__5);
				State = 47;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__0) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__7) | (1L << T__8) | (1L << STRING) | (1L << INT))) != 0)) {
					{
					{
					State = 44; statement();
					}
					}
					State = 49;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 50; Match(T__6);
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 51; expr();
				State = 52; Match(T__4);
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 54; Match(T__7);
				State = 55; paren_expr();
				State = 56; Match(T__4);
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 58; Match(T__4);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Paren_exprContext : ParserRuleContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public Paren_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_paren_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterParen_expr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitParen_expr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParen_expr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Paren_exprContext paren_expr() {
		Paren_exprContext _localctx = new Paren_exprContext(Context, State);
		EnterRule(_localctx, 4, RULE_paren_expr);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(T__8);
			State = 62; expr();
			State = 63; Match(T__9);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public TestContext test() {
			return GetRuleContext<TestContext>(0);
		}
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		ExprContext _localctx = new ExprContext(Context, State);
		EnterRule(_localctx, 6, RULE_expr);
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65; test();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66; id_();
				State = 67; Match(T__10);
				State = 68; expr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TestContext : ParserRuleContext {
		public Sum_Context[] sum_() {
			return GetRuleContexts<Sum_Context>();
		}
		public Sum_Context sum_(int i) {
			return GetRuleContext<Sum_Context>(i);
		}
		public TestContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_test; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterTest(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitTest(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTest(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TestContext test() {
		TestContext _localctx = new TestContext(Context, State);
		EnterRule(_localctx, 8, RULE_test);
		try {
			State = 77;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72; sum_(0);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 73; sum_(0);
				State = 74; Match(T__11);
				State = 75; sum_(0);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Sum_Context : ParserRuleContext {
		public TermContext term() {
			return GetRuleContext<TermContext>(0);
		}
		public Sum_Context sum_() {
			return GetRuleContext<Sum_Context>(0);
		}
		public Sum_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_sum_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterSum_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitSum_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSum_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Sum_Context sum_() {
		return sum_(0);
	}

	private Sum_Context sum_(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Sum_Context _localctx = new Sum_Context(Context, _parentState);
		Sum_Context _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_sum_, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			State = 80; term();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 90;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 88;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
					case 1:
						{
						_localctx = new Sum_Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_sum_);
						State = 82;
						if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
						State = 83; Match(T__12);
						State = 84; term();
						}
						break;
					case 2:
						{
						_localctx = new Sum_Context(_parentctx, _parentState);
						PushNewRecursionContext(_localctx, _startState, RULE_sum_);
						State = 85;
						if (!(Precpred(Context, 1))) throw new FailedPredicateException(this, "Precpred(Context, 1)");
						State = 86; Match(T__13);
						State = 87; term();
						}
						break;
					}
					} 
				}
				State = 92;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,6,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TermContext : ParserRuleContext {
		public Id_Context id_() {
			return GetRuleContext<Id_Context>(0);
		}
		public IntegerContext integer() {
			return GetRuleContext<IntegerContext>(0);
		}
		public Paren_exprContext paren_expr() {
			return GetRuleContext<Paren_exprContext>(0);
		}
		public TermContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_term; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitTerm(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TermContext term() {
		TermContext _localctx = new TermContext(Context, State);
		EnterRule(_localctx, 12, RULE_term);
		try {
			State = 96;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRING:
				EnterOuterAlt(_localctx, 1);
				{
				State = 93; id_();
				}
				break;
			case INT:
				EnterOuterAlt(_localctx, 2);
				{
				State = 94; integer();
				}
				break;
			case T__8:
				EnterOuterAlt(_localctx, 3);
				{
				State = 95; paren_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Id_Context : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(tinycParser.STRING, 0); }
		public Id_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_id_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterId_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitId_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Id_Context id_() {
		Id_Context _localctx = new Id_Context(Context, State);
		EnterRule(_localctx, 14, RULE_id_);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 98; Match(STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IntegerContext : ParserRuleContext {
		public ITerminalNode INT() { return GetToken(tinycParser.INT, 0); }
		public IntegerContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_integer; } }
		public override void EnterRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.EnterInteger(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ItinycListener typedListener = listener as ItinycListener;
			if (typedListener != null) typedListener.ExitInteger(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ItinycVisitor<TResult> typedVisitor = visitor as ItinycVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInteger(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IntegerContext integer() {
		IntegerContext _localctx = new IntegerContext(Context, State);
		EnterRule(_localctx, 16, RULE_integer);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100; Match(INT);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 5: return sum__sempred((Sum_Context)_localctx, predIndex);
		}
		return true;
	}
	private bool sum__sempred(Sum_Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		case 1: return Precpred(Context, 1);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x13', 'i', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x3', '\x2', '\x6', 
		'\x2', '\x16', '\n', '\x2', '\r', '\x2', '\xE', '\x2', '\x17', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\a', '\x3', '\x30', '\n', '\x3', '\f', '\x3', '\xE', 
		'\x3', '\x33', '\v', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x5', '\x3', '>', '\n', '\x3', '\x3', '\x4', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 'I', '\n', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', '\x6', 
		'P', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', 
		'\a', '[', '\n', '\a', '\f', '\a', '\xE', '\a', '^', '\v', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', '\x63', '\n', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x3', '\n', '\x2', '\x3', 
		'\f', '\v', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', 
		'\x2', '\x2', '\x2', 'n', '\x2', '\x15', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'=', '\x3', '\x2', '\x2', '\x2', '\x6', '?', '\x3', '\x2', '\x2', '\x2', 
		'\b', 'H', '\x3', '\x2', '\x2', '\x2', '\n', 'O', '\x3', '\x2', '\x2', 
		'\x2', '\f', 'Q', '\x3', '\x2', '\x2', '\x2', '\xE', '\x62', '\x3', '\x2', 
		'\x2', '\x2', '\x10', '\x64', '\x3', '\x2', '\x2', '\x2', '\x12', '\x66', 
		'\x3', '\x2', '\x2', '\x2', '\x14', '\x16', '\x5', '\x4', '\x3', '\x2', 
		'\x15', '\x14', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x3', '\x2', 
		'\x2', '\x2', '\x17', '\x15', '\x3', '\x2', '\x2', '\x2', '\x17', '\x18', 
		'\x3', '\x2', '\x2', '\x2', '\x18', '\x3', '\x3', '\x2', '\x2', '\x2', 
		'\x19', '\x1A', '\a', '\x3', '\x2', '\x2', '\x1A', '\x1B', '\x5', '\x6', 
		'\x4', '\x2', '\x1B', '\x1C', '\x5', '\x4', '\x3', '\x2', '\x1C', '>', 
		'\x3', '\x2', '\x2', '\x2', '\x1D', '\x1E', '\a', '\x3', '\x2', '\x2', 
		'\x1E', '\x1F', '\x5', '\x6', '\x4', '\x2', '\x1F', ' ', '\x5', '\x4', 
		'\x3', '\x2', ' ', '!', '\a', '\x4', '\x2', '\x2', '!', '\"', '\x5', '\x4', 
		'\x3', '\x2', '\"', '>', '\x3', '\x2', '\x2', '\x2', '#', '$', '\a', '\x5', 
		'\x2', '\x2', '$', '%', '\x5', '\x6', '\x4', '\x2', '%', '&', '\x5', '\x4', 
		'\x3', '\x2', '&', '>', '\x3', '\x2', '\x2', '\x2', '\'', '(', '\a', '\x6', 
		'\x2', '\x2', '(', ')', '\x5', '\x4', '\x3', '\x2', ')', '*', '\a', '\x5', 
		'\x2', '\x2', '*', '+', '\x5', '\x6', '\x4', '\x2', '+', ',', '\a', '\a', 
		'\x2', '\x2', ',', '>', '\x3', '\x2', '\x2', '\x2', '-', '\x31', '\a', 
		'\b', '\x2', '\x2', '.', '\x30', '\x5', '\x4', '\x3', '\x2', '/', '.', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x33', '\x3', '\x2', '\x2', '\x2', 
		'\x31', '/', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x32', '\x34', '\x3', '\x2', '\x2', '\x2', '\x33', '\x31', 
		'\x3', '\x2', '\x2', '\x2', '\x34', '>', '\a', '\t', '\x2', '\x2', '\x35', 
		'\x36', '\x5', '\b', '\x5', '\x2', '\x36', '\x37', '\a', '\a', '\x2', 
		'\x2', '\x37', '>', '\x3', '\x2', '\x2', '\x2', '\x38', '\x39', '\a', 
		'\n', '\x2', '\x2', '\x39', ':', '\x5', '\x6', '\x4', '\x2', ':', ';', 
		'\a', '\a', '\x2', '\x2', ';', '>', '\x3', '\x2', '\x2', '\x2', '<', '>', 
		'\a', '\a', '\x2', '\x2', '=', '\x19', '\x3', '\x2', '\x2', '\x2', '=', 
		'\x1D', '\x3', '\x2', '\x2', '\x2', '=', '#', '\x3', '\x2', '\x2', '\x2', 
		'=', '\'', '\x3', '\x2', '\x2', '\x2', '=', '-', '\x3', '\x2', '\x2', 
		'\x2', '=', '\x35', '\x3', '\x2', '\x2', '\x2', '=', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '=', '<', '\x3', '\x2', '\x2', '\x2', '>', '\x5', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\v', '\x2', '\x2', '@', '\x41', 
		'\x5', '\b', '\x5', '\x2', '\x41', '\x42', '\a', '\f', '\x2', '\x2', '\x42', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x43', 'I', '\x5', '\n', '\x6', '\x2', 
		'\x44', '\x45', '\x5', '\x10', '\t', '\x2', '\x45', '\x46', '\a', '\r', 
		'\x2', '\x2', '\x46', 'G', '\x5', '\b', '\x5', '\x2', 'G', 'I', '\x3', 
		'\x2', '\x2', '\x2', 'H', '\x43', '\x3', '\x2', '\x2', '\x2', 'H', '\x44', 
		'\x3', '\x2', '\x2', '\x2', 'I', '\t', '\x3', '\x2', '\x2', '\x2', 'J', 
		'P', '\x5', '\f', '\a', '\x2', 'K', 'L', '\x5', '\f', '\a', '\x2', 'L', 
		'M', '\a', '\xE', '\x2', '\x2', 'M', 'N', '\x5', '\f', '\a', '\x2', 'N', 
		'P', '\x3', '\x2', '\x2', '\x2', 'O', 'J', '\x3', '\x2', '\x2', '\x2', 
		'O', 'K', '\x3', '\x2', '\x2', '\x2', 'P', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'Q', 'R', '\b', '\a', '\x1', '\x2', 'R', 'S', '\x5', '\xE', '\b', 
		'\x2', 'S', '\\', '\x3', '\x2', '\x2', '\x2', 'T', 'U', '\f', '\x4', '\x2', 
		'\x2', 'U', 'V', '\a', '\xF', '\x2', '\x2', 'V', '[', '\x5', '\xE', '\b', 
		'\x2', 'W', 'X', '\f', '\x3', '\x2', '\x2', 'X', 'Y', '\a', '\x10', '\x2', 
		'\x2', 'Y', '[', '\x5', '\xE', '\b', '\x2', 'Z', 'T', '\x3', '\x2', '\x2', 
		'\x2', 'Z', 'W', '\x3', '\x2', '\x2', '\x2', '[', '^', '\x3', '\x2', '\x2', 
		'\x2', '\\', 'Z', '\x3', '\x2', '\x2', '\x2', '\\', ']', '\x3', '\x2', 
		'\x2', '\x2', ']', '\r', '\x3', '\x2', '\x2', '\x2', '^', '\\', '\x3', 
		'\x2', '\x2', '\x2', '_', '\x63', '\x5', '\x10', '\t', '\x2', '`', '\x63', 
		'\x5', '\x12', '\n', '\x2', '\x61', '\x63', '\x5', '\x6', '\x4', '\x2', 
		'\x62', '_', '\x3', '\x2', '\x2', '\x2', '\x62', '`', '\x3', '\x2', '\x2', 
		'\x2', '\x62', '\x61', '\x3', '\x2', '\x2', '\x2', '\x63', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '\x65', '\a', '\x11', '\x2', '\x2', '\x65', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\x12', '\x2', 
		'\x2', 'g', '\x13', '\x3', '\x2', '\x2', '\x2', '\n', '\x17', '\x31', 
		'=', 'H', 'O', 'Z', '\\', '\x62',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
